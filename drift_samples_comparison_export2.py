# -*- coding: UTF-8 -*-.
import argparse
import csv
import datetime
from tsne import bh_sne
import matplotlib
import json
import requests
# matplotlib.use('Agg')
from matplotlib import pyplot as plt
import numpy as np
from sklearn import manifold

API_KEY="f7a46da60ecf10179f61a838de5830aac72a955d96728bbcd30fa811c3f5d30d"

def params():
    parser = argparse.ArgumentParser()
    parser.add_argument('input_csv', help='Input CSV Location')
    params = parser.parse_args()
    return params.input_csv

ini_drifts = [2320, 4476, 20590, 28432, 44652]
end_drifts = [2419, 5353, 21436, 28444,  45320]

# get params
input_csv = params()

# load samples
md5 = []
labels = []
with open(input_csv, 'rb') as file:
    reader = csv.DictReader(file)
    for row in reader:
        # convert attribute to float
        md5.append(row["md5"])
        labels.append(row["label"])

# md5 range
s_range = 70
# iterate over drifts found
for d1, d2 in zip(ini_drifts, end_drifts):
    before_drift_md5 = []
    before_drift_labels = []
    for i in range(d1-s_range, d1):
        before_drift_md5.append(md5[i])
        before_drift_labels.append(labels[i])
    after_drift_md5 = []
    after_drift_labels = []
    for i in range(d2+1, d2+s_range+1):
        after_drift_md5.append(md5[i])
        after_drift_labels.append(labels[i])

    # write features csv
    before = open('drift_json/vt_eddm_'+str(d1)+'_before_drift_.json', "w")
    after = open('drift_json/vt_eddm_'+str(d2)+'_after_drift_.json', "w")

    url = 'https://www.virustotal.com/vtapi/v2/file/report'
    # iterate over mws
    for i in range(len(before_drift_md5)):
        # if before_drift_labels[i] == '1':
        params = {'apikey': API_KEY, 'resource': before_drift_md5[i], 'allinfo': 'true'}
        response = requests.get(url, params=params)
        before.write(json.dumps(response.json()))
        before.write("\n")
    for i in range(len(after_drift_md5)):
        # if after_drift_labels[i] == '1':
        params = {'apikey': API_KEY, 'resource': after_drift_md5[i], 'allinfo': 'true'}
        response = requests.get(url, params=params)
        after.write(json.dumps(response.json()))
        after.write("\n")
