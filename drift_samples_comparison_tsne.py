# -*- coding: UTF-8 -*-.
import argparse
import csv
import datetime
from tsne import bh_sne
import matplotlib
# matplotlib.use('Agg')
from matplotlib import pyplot as plt
import numpy as np
from sklearn import manifold

def params():
    parser = argparse.ArgumentParser()
    parser.add_argument('input_csv', help='Input CSV Location')
    params = parser.parse_args()
    return params.input_csv

ddm_drifts = [2320, 2801, 5353, 20590, 28444,  42559, 45320, 59233]
eddm_drifts = [2419, 4476, 21436, 28432, 44652]

# get params
input_csv = params()

# load samples
samples = []
labels = []
with open(input_csv, 'rb') as file:
    reader = csv.DictReader(file)
    for row in reader:
        # convert attribute to float
        item = []
        # iterate over keys and save label in a separate array
        for k in row.keys():
            if k != "label":
                item.append(float(row[k]))
            else:
                labels.append(float(row[k]))
        # append item to samples list
        samples.append(item)

# samples range
s_range = 70
# iterate over drifts found
for d in ddm_drifts:
    before_drift_samples = []
    before_drift_labels = []
    for i in range(d-s_range, d):
        before_drift_samples.append(samples[i])
        if labels[i] == 0:
            # gw before
            before_drift_labels.append(0)
        else:
            # mw before
            before_drift_labels.append(1)
    after_drift_samples = []
    after_drift_labels = []
    for i in range(d+1, d+s_range+1):
        after_drift_samples.append(samples[i])
        if labels[i] == 0:
            # gw after
            after_drift_labels.append(2)
        else:
            # mw before
            after_drift_labels.append(3)

    ## merge data

    X = np.array(before_drift_samples + after_drift_samples)
    y = np.array(before_drift_labels + after_drift_labels)

    ##### sk_sne #######
    n_components = 2
    perplexity = 23
    it = 15000
    ex=26
    lr=425
    tsne = manifold.TSNE(n_components=n_components,perplexity=perplexity,
                         learning_rate=lr, n_iter=it, n_iter_without_progress=it,
                         init='pca', random_state=1,
                         early_exaggeration=ex)
    vis_data = tsne.fit_transform(X)


    ##### bh_sne #######
    # vis_data = bh_sne(np.array(before_drift_samples + after_drift_samples))
    #
    # # plot the result
    vis_x = vis_data[:, 0]
    vis_y = vis_data[:, 1]

    fig, ax = plt.subplots(1)
    ax.scatter(vis_x[y==0], vis_y[y==0], label='Goodware before Drift', color="blue")
    ax.scatter(vis_x[y==2], vis_y[y==2], label='Goodware after Drift', color="green")
    ax.scatter(vis_x[y==1], vis_y[y==1], label='Malware before Drift', color="red")
    ax.scatter(vis_x[y==3], vis_y[y==3], label='Malware after Drift', color="orange")
    lgd = ax.legend(loc=9, bbox_to_anchor=(0.5, -0.1))
    art = []
    art.append(lgd)
    plt.show()

    # fig.savefig('ddm_tsne_alternating_'+str(d)+'.png', format='png', additional_artists=art, bbox_inches="tight")
    # exit()

    # plt.scatter(vis_x, vis_y, c=y, cmap=plt.cm.get_cmap("bwr", 10))
    # plt.legend()
    # plt.savefig('tsne_'+str(d)+'.pdf', format='pdf')
