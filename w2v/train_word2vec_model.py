#!/usr/bin/env python
# -*- coding: utf-8 -*-
import logging
import os.path
import sys
import multiprocessing
import csv
import argparse
import re
import numpy as np

from gensim.models import Word2Vec
from gensim.models.word2vec import LineSentence

USED_FEATURES = [ "BaseOfCode", "BaseOfData", "Characteristics",
                  "DllCharacteristics", "FileAlignment", "ImageBase", "Machine", "Magic", "NumberOfRvaAndSizes", "NumberOfSections", "NumberOfSymbols", "PE_TYPE", "PointerToSymbolTable", "Size", "SizeOfCode", "SizeOfHeaders", "SizeOfImage", "SizeOfInitializedData", "SizeOfOptionalHeader", "SizeOfUninitializedData", "TimeDateStamp"]

def params():
    parser = argparse.ArgumentParser()
    parser.add_argument('goodwares_csv', help='Goodwares CSV location')
    parser.add_argument('malwares_csv', help='Malwares CSV Location')
    parser.add_argument('out', help='Model file name')
    params = parser.parse_args()
    return params.goodwares_csv, params.malwares_csv, params.out

def clear_text(text):
    text = text.replace("'","").replace("[","").replace("]","")
    text = re.sub("[^A-Za-z0-9]+","", text)
    return text.lower()

def read_file_w2v(input_file):
    with open(input_file, 'rb') as file:
        reader = csv.DictReader(file)
        features = []
        identifiers = []
        imported_dlls = []
        imported_symbols = []
        for row in reader:
            example = []
            for f in USED_FEATURES:
                example.append(int(row[f]))
            example.append(float(row["Entropy"]))
            # get compiler and packer info
            id_regex = r"\[\'[^']*\'\]"
            ident = re.findall(id_regex,row["Identify"])
            identify = ""
            for i in ident:
                identify += clear_text(i) + " "
            # get imported dlls
            dll_regex = r"\'[^']*\'"
            i_dlls = re.findall(dll_regex,row["ImportedDlls"])
            dlls = ""
            for d in i_dlls:
                dlls += clear_text(d) + " "
            # get imported symbols
            i_symbols = re.findall(dll_regex,row["ImportedSymbols"])
            symbols = ""
            for d in i_symbols:
                symbols += clear_text(d) + " "
            # apped texts to their arrays
            identifiers.append(identify.split())
            imported_dlls.append(dlls.split())
            imported_symbols.append(symbols.split())
            # append current example features
            features.append(example)
    features = np.array(features)
    identifiers = np.array(identifiers)
    imported_dlls = np.array(imported_dlls)
    imported_symbols = np.array(imported_symbols)
    return features, identifiers, imported_dlls, imported_symbols

if __name__ == '__main__':

    gw_csv, mw_csv, outp = params()

    program = os.path.basename(sys.argv[0])
    logger = logging.getLogger(program)

    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s')
    logging.root.setLevel(level=logging.INFO)
    logger.info("running %s" % ' '.join(sys.argv))

    # check and process input arguments

    gw_features, gw_identifiers, gw_dlls, gw_symbols = read_file_w2v(gw_csv)
    mw_features, mw_identifiers, mw_dlls, mw_symbols = read_file_w2v(mw_csv)

    identifiers = np.concatenate((gw_identifiers, mw_identifiers),axis=0)
    dlls = np.concatenate((gw_dlls, mw_dlls),axis=0)
    symbols = np.concatenate((gw_symbols, mw_symbols),axis=0)

    model = Word2Vec(symbols, size=100, window=5, min_count=3, workers=4,iter=10)

    # trim unneeded model memory = use (much) less RAM
    model.init_sims(replace=True)

    model.save(outp)
