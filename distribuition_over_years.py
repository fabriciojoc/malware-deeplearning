# -*- coding: UTF-8 -*-.
import argparse
import numpy as np
import sys
sys.path.append("./lib")
from common import read_features_month_year

def params():
    parser = argparse.ArgumentParser()
    parser.add_argument('malwares_csv', help='Malwares CSV Location')
    parser.add_argument('labels_csv', help='AVClass labels Location')
    parser.add_argument('date', help='Train month and year, in the format month.year')
    params = parser.parse_args()
    return params.malwares_csv, params.labels_csv, params.date

def format_month(text):
    m=text.split(".")
    month=m[0]
    year=m[1]
    return int(month), int(year)

def init_class_dict(labels_file):
    d={}
    with open(labels_file, 'r') as f:
        for mw in f:
            h, c = mw.split('\t')
            if "SINGLETON" in c:
                d["SINGLETON"]=0
            else:
                d[c.rstrip()]=0
    d['unknown']=0
    return d

# given a avclass .labels file, find current sample md5 and return its class
def find_mw_class(labels_file, md5):
    found = False
    with open(labels_file, 'r') as f:
        for mw in f:
            h, c = mw.split('\t')
            if h==md5:
                found = True
                if "SINGLETON" in c:
                    return "SINGLETON"
                else:
                    return c.rstrip()
    if not found:
        return "unknown"

if __name__ == '__main__':
    mw_csv, labels_csv, date = params()
    # format input month and year
    month, year = format_month(date)
    features = read_features_month_year(mw_csv,month,year)
    d = init_class_dict(labels_csv)
    print d
    for f in features:
        c = find_mw_class(labels_csv, f['MD5'])
        d[c]=d[c]+1
    for k in d:
        print str(k)+'\t'+str(d[k])
