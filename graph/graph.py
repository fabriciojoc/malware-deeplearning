# -*- coding: UTF-8 -*-.
import argparse
import os
import csv
import numpy as np
import matplotlib.pyplot as plt

def params():
    parser = argparse.ArgumentParser()
    parser.add_argument('csv', help='CSV location')
    params = parser.parse_args()
    return params.csv

def read_file(input_file):
    with open(input_file, 'rb') as file:
        reader = csv.DictReader(file)
        thresholds = []
        accs = []
        f1s = []
        fprs = []
        fnrs = []
        tprs = []
        tnrs = []
        for row in reader:
            thresholds.append(row['threshold'])
            accs.append(row['accuracy'])
            f1s.append(row['f1score'])
            fprs.append(row['fpr'])
            fnrs.append(row['fnr'])
            tprs.append(row['tpr'])
            tnrs.append(row['tnr'])
    return thresholds, accs, f1s, fprs, fnrs, tprs, tnrs


def fprfnr_threshold(clf, fprs, fnrs, thresholds):
    plt.figure(1)
    plt.ylabel(u'FPR & FNR')
    plt.xlabel(u'Threshold')
    plt.title(clf+": FPR & FNR x Threshold")
    plt.axvline(0, color="#000000", linewidth=2)
    plt.axhline(0, color="#000000", linewidth=2)
    x_ticks = np.arange(0,1.05,0.1)
    plt.xticks(x_ticks)
    plt.yticks(x_ticks)
    plt.ylim(-0.05,1.05)
    plt.xlim(-0.05,1.05)
    plt.plot(thresholds, fprs, 'b-', label="FPR", linewidth=4)
    plt.plot(thresholds, fnrs, 'r-', label="FNR", linewidth=4)
    plt.legend(loc=1)
    plt.grid(True)
    plt.show()

def tpr_fnr(clfs, fprs, tprs):
        plt.figure(1)
        plt.ylabel(u'TPR')
        plt.xlabel(u'FPR')
        plt.title("TPR x FPR")
        plt.axvline(0, color="#000000", linewidth=2)
        plt.axhline(0, color="#000000", linewidth=2)
        x_ticks = np.arange(0,1.05,0.05)
        plt.xticks(x_ticks)
        plt.yticks(x_ticks)
        plt.ylim(-0.05,1.05)
        plt.xlim(-0.05,1.05)
        for i in range(len(clfs)):
            plt.plot(fprs[i], tprs[i], label=clfs[i], linewidth=4)
        plt.legend(loc=4)
        plt.grid(True)
        plt.show()

# svc_t, svc_accs, svc_f1s, svc_fprs, svc_fnrs, svc_tprs, svc_tnrs = read_file("svc_results.csv")
mlp_t, mlp_accs, mlp_f1s, mlp_fprs, mlp_fnrs, mlp_tprs, mlp_tnrs = read_file("mlp_results.csv")
svc_t, svc_accs, svc_f1s, svc_fprs, svc_fnrs, svc_tprs, svc_tnrs = read_file("svc_results.csv")
knn_t, knn_accs, knn_f1s, knn_fprs, knn_fnrs, knn_tprs, knn_tnrs = read_file("knn_results.csv")
randomforest_t, randomforest_accs, randomforest_f1s, randomforest_fprs, randomforest_fnrs, randomforest_tprs, randomforest_tnrs = read_file("randomforest_results.csv")
# decisiontree_t, decisiontree_accs, decisiontree_f1s, decisiontree_fprs, decisiontree_fnrs, decisiontree_tprs, decisiontree_tnrs = read_file("decisiontree_results.csv")
# tpr_fnr(["SVC", "MLP", "KNN", "Random Forest", "Decision Tree"], [svc_tprs, mlp_tprs, knn_tprs, randomforest_tprs, decisiontree_tprs], [svc_fnrs, mlp_fnrs, knn_fnrs, randomforest_fnrs, decisiontree_fnrs])

tpr_fnr(["MLP", "SVC", "KNN", "Random Forest"], [mlp_fprs, svc_fprs, knn_fprs, randomforest_fprs], [mlp_tprs, svc_tprs, knn_tprs, randomforest_tprs])
fprfnr_threshold("MLP",mlp_fprs, mlp_fnrs, mlp_t)
fprfnr_threshold("SVC",svc_fprs, svc_fnrs, svc_t)
fprfnr_threshold("KNN",knn_fprs, knn_fnrs, knn_t)
fprfnr_threshold("Random Forest",randomforest_fprs, randomforest_fnrs, randomforest_t)
